# application-prod.properties
spring.application.name=Cryptography

# CORS Configuration (Production) - IMPORTANT: Replace with your actual frontend domain(s)
cors.allowed.origins=${CORS_ALLOWED_ORIGINS}
#https://your-production-frontend-domain.com # e.g., https://app.yourdomain.com
cors.allowed.methods=GET,POST,PUT,DELETE,PATCH
cors.allowed.headers=*
cors.allowed.credentials=true

app.frontend.password-reset-url=${FRONTEND_RESET_URL}

# Often default 8080 or specific port in prod
server.port=${PORT:8082}

# Database Configuration (Production) - Use Environment Variables
spring.datasource.url=${DB_URL} 
spring.datasource.password=${DB_PASSWORD}
spring.datasource.username=${DB_USERNAME}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.hibernate.ddl-auto=update 
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Redis Configuration (Production) - Use Environment Variables
spring.data.redis.host=${REDIS_HOST}
spring.data.redis.port=${REDIS_PORT}
spring.data.redis.password=${REDIS_PASSWORD}

# JWT Secret Key (Production) - Use Environment Variable
jwt.secret=${JWT_SECRET} 
# IMPORTANT: This MUST be a strong, unique, and securely managed secret

# Logging Configuration (Production)
#logging.file.name=/var/log/app/cryptography.log 
# Standard path for production logs
logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=WARN 
# Less verbose for production
logging.level.org.springframework.security=INFO 
# Less verbose for production

spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# PBKDF2 Iterations
security.pbkdf2.iterations=65536 
# Can be increased over time
